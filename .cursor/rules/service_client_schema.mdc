---
description: This rule documents the mapping between the `Client` struct fields and the SQL queries used in `ClientService` within the `finance_service` module. It assumes the database schema reflects migration `0012_add_client_details.sql`.
globs: 
alwaysApply: false
---
# Cursor Rule: service_client_schema

<context>
This rule documents the mapping between the `Client` struct fields and the SQL queries used in `ClientService` within the `finance_service` module. It assumes the database schema reflects migration `0012_add_client_details.sql`.
</context>

<rules>

## Query Mappings

- **`list_clients` & `get_client` & `get_clients_by_owner`:**
  - `SELECT`: All columns from the `clients` table corresponding to the fields documented in `models_client_fields` are selected.
  - `FROM`: `clients` table.
  - `WHERE`: `id = $1` (for `get_client`), `owner_id = $1` (for `get_clients_by_owner`).
  - `ORDER BY`: `name`.
  - `Mapping`: Uses `sqlx::query_as!(Client, ...)` to directly map the result rows to the `Client` struct.
  - **Important**: Fields like `invoices`, `estimates`, etc., are **not** populated by these queries. The service logic manually initializes them to `None` after fetching.

- **`create_client`:**
  - `INSERT INTO`: `clients` table, inserting values for all columns corresponding to `Client` struct fields.
  - `VALUES`: Binds values from `CreateClientRequest`:
    - Generates a new `Uuid::new_v4()` for `id`.
    - Uses required fields `name`, `owner_id`, `user_id` directly.
    - Uses optional fields from the request, providing database defaults ('active' for `status`, 'USD' for `currency`) if the request field is `None`.
    - Uses `Utc::now()` for `created_at` and `updated_at`.
  - `RETURNING`: All columns to populate the returned `Client` struct.
  - `Mapping`: Uses `sqlx::query_as!(Client, ...)` and initializes non-DB fields to `None`.

- **`update_client`:**
  - **Fetch**: First fetches the existing `Client` using `get_client`.
  - **Merge**: Iterates through `Option` fields in `UpdateClientRequest`. If a field is `Some(value)`, it updates the corresponding field in the fetched `Client` struct.
  - `UPDATE`: `clients` table.
  - `SET`: Updates all columns based on the merged `Client` struct values. Sets `updated_at = $timestamp`.
  - `WHERE`: `id = $client_id`.
  - `RETURNING`: All columns to populate the returned `Client` struct.
  - `Mapping`: Uses `sqlx::query_as!(Client, ...)` and initializes non-DB fields to `None`.
## Data Handling

- **Optional Fields**: `Option<T>` fields in structs map to nullable database columns. `INSERT` uses defaults if `None`, `UPDATE` only sets the column if a value is provided in the request.
- **Timestamps**: `created_at` and `updated_at` use `chrono::DateTime<Utc>` corresponding to `TIMESTAMPTZ`.
- **Defaults**: Database defaults (`NOW()` for `updated_at`, 'active' for `status`, 'USD' for `currency`) are leveraged where applicable, especially during `INSERT`.
- **Associated Data**: Related data (invoices, etc.) is explicitly excluded from these core CRUD operations and assumed to be handled by separate service logic or relations.

</rules> 
