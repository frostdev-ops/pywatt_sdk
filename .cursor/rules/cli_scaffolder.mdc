---
description: 
globs: 
alwaysApply: true
---
# Component: CLI Scaffolder (cargo-pywatt)

## Component Type
CLI Tool / Cursor Rule

## File Path
`.cursor/rules/cli_scaffolder.mdc`

## Purpose
The CLI scaffolder (`cargo-pywatt`) provides a streamlined way to create new PyWatt modules with the correct structure, dependencies, and boilerplate code. It helps developers quickly bootstrap new modules that follow PyWatt conventions.

## Key Features
1. **Module Generation**: Create new modules with a single command
2. **Template Support**: Generate binary or library modules
3. **Transport Options**: Support for HTTP or Unix Domain Socket transport
4. **Shell Completions**: Generate shell completions for improved developer experience

## Usage Examples
```bash
# Create a new binary module with HTTP transport
cargo pywatt new my-module

# Create a library module with UDS transport
cargo pywatt new my-lib --lib --uds

# Generate shell completions
cargo pywatt generate-completions bash > ~/.local/share/bash-completion/completions/cargo-pywatt
```

## Generated Module Structure
```
my-module/
├── src/
│   └── main.rs        # Module entrypoint with #[pywatt::module] attribute
├── tests/
│   └── integration_test.rs
├── Cargo.toml         # Cargo manifest with required dependencies
├── .gitignore
└── README.md          # Documentation for the module
```

## Configuration Options
1. **Module Type**: Binary (default) or Library
2. **Transport**: HTTP (default) or Unix Domain Socket
3. **Output Directory**: Custom output location

## Best Practices
1. Use kebab-case for module names (e.g., `my-module`)
2. Keep module names descriptive of their purpose
3. Enable the metrics feature for modules that need prometheus metrics
4. Run `cargo test` after scaffolding to verify everything is set up correctly

## Implementation Notes
- Uses Handlebars for template rendering
- Templates are embedded in the binary for easy distribution
- Provides informative error messages when validation fails
- Performs cargo check to verify the generated code is valid

## Testing
- Verify module structure with filesystem inspection
- Test compilation with `cargo check`
- Test execution with `cargo run`
- Test CLI parameter validation with invalid inputs

## Related Components
- `pywatt_sdk`: The generated module depends on this crate
- `pywatt_macros`: Provides the `#[pywatt::module]` attribute
- `pywatt_sdk_test`: Used by the generated test files
