---
description: 
globs: 
alwaysApply: true
---
# Component: Module IPC Handshake

## Component Type
Utility / Cursor Rule

## File Path
`.cursor/rules/module_ipc_handshake.mdc`

## Purpose
This rule codifies the required initialization-handshake pattern every PyWatt module must implement to communicate with the orchestrator. It ensures modules perform a consistent, one-line JSON handshake and announce their endpoints reliably.

## Key Steps & Patterns
1. **Initialize Logging & Redaction**
   - Call `init_module()` to configure tracing-subsystem for `stderr` and enable secret redaction.
2. **Perform Handshake**
   - Call `read_init::<OrchestratorInit>().await?` to read a single-line JSON handshake from `stdin`.
   - On error, log to `stderr` and exit with non-zero status.
3. **Bind Service to Provided Address**
   - Parse `init.listen` into a `SocketAddr` and bind HTTP/WebSocket server to it.
4. **Send Announce Message**
   - Construct an `AnnounceBlob` with `listen` and `endpoints` fields.
   - Call `send_announce(&announce)?` to emit a single-line JSON on `stdout`.

## Usage Example
```rust
use pywatt_module_utils::{init_module, read_init, send_announce, AnnounceBlob, EndpointInfo};
use axum::{Router, routing::get};
use std::net::SocketAddr;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // 1. Configure stderr logging
    init_module();

    // 2. Handshake: read orchestrator init
    let init = read_init::<OrchestratorInit>().await?;
    let addr: SocketAddr = init.listen.parse()?;

    // 3. Build service
    let app = Router::new().route("/health", get(|| async { "OK" }));

    // 4. Announce on stdout
    let announce = AnnounceBlob {
        listen: addr.to_string(),
        endpoints: vec![EndpointInfo { path: "/health".into(), methods: vec!["GET".into()], auth: None }],
    };
    send_announce(&announce)?;

    // 5. Run service
    axum::Server::bind(&addr).serve(app.into_make_service()).await?;
    Ok(())
}
```

## Error Handling
- Failures in `read_init` should map to `AppError::HandshakeFailed` and exit.
- Failures in `send_announce` should map to `AppError::AnnounceFailed` and exit.

## Testing
- CI should include a smoke test sending a dummy JSON to module stdin and asserting a valid announce JSON on stdout.
  ```bash
  echo '{"listen":"127.0.0.1:0"}' | target/debug/my_module | jq -e '.listen and .endpoints'
  ```

## Dependencies
- `pywatt_module_utils` (init_module, read_init, send_announce)
- `orchestrator::ipc::AnnounceBlob`, `EndpointInfo`
- `axum` or other HTTP framework to bind services

## Notes & Best Practices
- Always keep the handshake and announce messages single-line JSON.
- Do NOT use `println!` for any logsâ€”reserve `stdout` for IPC only.
