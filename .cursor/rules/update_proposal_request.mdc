---
description: Documents the `UpdateProposalRequest` struct used for updating `Proposal` entities in the `finance_service` module.
globs: 
alwaysApply: false
---
# Cursor Rule: update_proposal_request

<context>
Documents the `UpdateProposalRequest` struct used for updating `Proposal` entities in the `finance_service` module.
</context>

<rules>

## Structure

```rust
use serde::{Deserialize, Serialize};
use uuid::Uuid;
use chrono::{DateTime, Utc};
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct UpdateProposalRequest {
    /// Unique identifier for the proposal (Required)
    pub id: Uuid,
    /// Client ID this proposal belongs to
    pub client_id: Option<Uuid>,
    /// Proposal title
    pub title: Option<String>,
    /// Optional description
    pub description: Option<String>,
    /// Expiration timestamp
    pub expires_at: Option<DateTime<Utc>>,
    /// Status of the proposal
    pub status: Option<String>,
}
```

## Fields

- `id: Uuid`: **Required**. The ID of the `Proposal` to update.
- All other fields (`client_id`, `title`, `description`, `expires_at`, `status`) are `Option<T>`.
- Only fields provided as `Some(value)` in the request will be considered for update.

## Usage

- Used as the input payload for the `ProposalService::update_proposal` method.
- Follows the Fetch-Merge-Update pattern documented in `update_optional_fields`.

</rules> 
