---
description: Finance, fincancial documents
globs: 
alwaysApply: false
---
# Component: Finance Service Payment Flow

## Component Type
API Controller/Service Integration

## File Path
`src/modules/finance_service/src/main.rs` (handlers)
`src/modules/finance_service/src/services/stripe_service.rs` (Stripe integration)

## Purpose
This component implements the invoice payment flow in the Finance Service module. It provides functionality to:
- Generate Stripe Checkout Sessions for invoice payments
- Process Stripe webhooks to record completed payments
- Link payments to invoices when payments are completed

## Key Types & Structures
- **`StripeService`**: Service for interfacing with the Stripe API, including checkout session creation and webhook verification
- **`Payment`**: Model representing a payment record, linked to a client and optionally an invoice
- **`CreatePaymentRequest`**: Payload for creating a new payment

## Interfaces/Traits
- **Stripe Checkout Sessions**: Creates Stripe checkout sessions with invoice details and redirect URLs
- **Webhook Processing**: Validates and processes Stripe webhook events

## Public API
- **`POST /v1/finance/portal/clients/:client_id/invoices/:id/pay`**: Generates a Stripe Checkout session for an invoice
- **`POST /v1/finance/webhooks/stripe`**: Processes Stripe webhook events (payment completion)

## Design Patterns
- **Payload Transformation**: Converts Invoice data to Stripe checkout session parameters
- **Event-Driven Payment Recording**: Uses webhooks to asynchronously record payments
- **Reference Tracking**: Uses client_reference_id to track which invoice a payment belongs to

## Error Handling
- Invalid webhook signatures return 400 Bad Request
- Invoice not found returns 404 Not Found 
- Client mismatch returns 403 Forbidden (prevents accessing others' invoices)
- Failed payment creation logs errors but still returns 200 OK to Stripe

## Usage Examples
```rust
// Generate a checkout session
let response = await fetch("/v1/finance/portal/clients/1234/invoices/5678/pay", {
  method: "POST",
  headers: { "Authorization": "Bearer token" }
});
const { session_id } = await response.json();
// Use session_id with Stripe.js to redirect to checkout
```

## Testing Approach
- **Unit Tests**: Test correct transformation of invoice data to Stripe parameters
- **Integration Tests**: Test webhook handling with mock Stripe events
- **Manual Testing**: Verify checkout flow with Stripe test mode

## Dependencies
- **Internal**: PaymentService, InvoiceService, StripeService
- **External**: stripe Rust crate

## Performance Considerations
- Webhook handlers should process quickly to avoid Stripe timeouts
- Payment creation occurs asynchronously after checkout completion

## Security Considerations
- Webhook signatures are verified to prevent spoofed events
- Client ID is verified against invoice owner to prevent unauthorized access
- Environment variables for Stripe keys and webhook secrets are managed by orchestrator

## Notes & Best Practices
- Always use client_reference_id when creating checkout sessions to track invoice association
- Store minimal payment details locally - rely on Stripe for complete payment records
- Use test mode in development with Stripe's test webhooks
