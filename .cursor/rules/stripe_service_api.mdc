---
description: This rule documents the usage of the `async-stripe` crate (version 0.41.0 or compatible) within the `StripeService` in the `finance_service` module.
globs: 
alwaysApply: false
---
# Cursor Rule: stripe_service_api

<context>
This rule documents the usage of the `async-stripe` crate (version 0.41.0 or compatible) within the `StripeService` in the `finance_service` module.
</context>

<rules>

## Initialization

- The `StripeService` is initialized with a Stripe API key and a webhook signing secret.
- It creates an internal `stripe::Client` instance using the API key.

```rust
use stripe::Client;

#[derive(Clone)]
pub struct StripeService {
    client: Client,
    webhook_secret: String,
}

impl StripeService {
    pub fn new(api_key: String, webhook_secret: String) -> Self {
        let client = Client::new(api_key);
        StripeService { client, webhook_secret }
    }
    // ... methods ...
}
```

## Webhook Verification

- The `verify_webhook` method takes the raw request body (`&[u8]`) and the `Stripe-Signature` header (`&str`).
- It first converts the byte payload to `&str` using `std::str::from_utf8`.
- It then calls `stripe::Webhook::construct_event` with the payload string, signature header, and the stored webhook secret.
- **Requires Feature**: The `webhook-events` feature flag must be enabled for the `async-stripe` crate.
- Returns `Result<stripe::Event, stripe::StripeError>`.

```rust
use stripe::{Event, Webhook, StripeError};
use std::str;

impl StripeService {
    pub fn verify_webhook(&self, payload: &[u8], sig_header: &str) -> Result<Event, StripeError> {
        let payload_str = str::from_utf8(payload)
            .map_err(|_| StripeError::from(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Invalid UTF-8 sequence in payload"
            )))?;
            
        Webhook::construct_event(payload_str, sig_header, &self.webhook_secret)
    }
    // ...
}
```
## Creating Checkout Sessions

- The `create_checkout_session` method constructs parameters for a one-time payment checkout session.
- It uses the following key types from `async-stripe`:
  - `stripe::CreateCheckoutSession`: The main parameter builder.
  - `stripe::CheckoutSessionMode::Payment`: Sets the session mode.
  - `stripe::CreateCheckoutSessionLineItem`: Defines an item in the checkout.
  - `stripe::CreateCheckoutSessionLineItemPriceData`: Specifies price details inline.
  - `stripe::CreateCheckoutSessionLineItemPriceDataProductData`: Specifies product details inline.
- It sets `mode`, `success_url`, `cancel_url`, `payment_method_types` (to `card`), and `client_reference_id` (using the internal invoice ID).
- It creates a single `line_item` using nested builder structs for `price_data` and `product_data`.
- It calls `stripe::CheckoutSession::create` with the client and parameters.
- Returns `Result<String, stripe::StripeError>` containing the Stripe Checkout Session ID.

```rust
use stripe::{Client, CreateCheckoutSession, CheckoutSessionMode, CreateCheckoutSessionLineItem, CreateCheckoutSessionLineItemPriceData, CreateCheckoutSessionLineItemPriceDataProductData, CheckoutSession, StripeError};
use uuid::Uuid;

impl StripeService {
    pub async fn create_checkout_session(&self, invoice_id: Uuid, description: &str, amount_cents: i64, currency: &str, success_url: &str, cancel_url: &str) -> Result<String, StripeError> {
        let mut params = CreateCheckoutSession::new();
        params.mode = Some(CheckoutSessionMode::Payment);
        params.success_url = Some(success_url);
        params.cancel_url = Some(cancel_url);
        params.payment_method_types = Some(vec!["card".to_string()]);
        params.client_reference_id = Some(invoice_id.to_string());
        
        let line_item = CreateCheckoutSessionLineItem {
            price_data: Some(CreateCheckoutSessionLineItemPriceData {
                currency: currency,
                unit_amount: Some(amount_cents),
                product_data: Some(CreateCheckoutSessionLineItemPriceDataProductData {
                    name: format!("Invoice {}", invoice_id),
                    description: Some(description.to_string()),
                    ..Default::default()
                }),
                ..Default::default()
            }),
            quantity: Some(1),
            ..Default::default()
        };
        
        params.line_items = Some(vec![line_item]);

        let session = CheckoutSession::create(&self.client, params).await?;
        Ok(session.id)
    }
}
```

## Error Handling

- Methods generally return `Result<T, stripe::StripeError>`.
- Handle potential errors from API calls and webhook verification.

</rules> 
